// Code generated by go-bindata.
// sources:
// assets/Dockerfile
// assets/Dockerfile-go
// assets/Dockerfile-python
// assets/entrypoint
// assets/entrypoint-go
// assets/entrypoint-python
// DO NOT EDIT!

package command

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x94\xd1\x8f\x9b\x46\x10\xc6\xdf\xf9\x2b\x46\xf8\x1a\xb5\x51\xbd\xf8\xf2\xd0\x4a\x97\xde\xa9\x24\x76\x5a\x9a\x1e\x46\x1c\x4d\x7b\x8a\xa3\x68\x6f\x19\xc3\xd4\xb0\xbb\xdd\x5d\x7c\x71\x11\xfd\xdb\x2b\x30\x39\x9c\x34\xbd\x07\xcb\x0c\xf3\x9b\x6f\xbf\x41\x1f\xcc\xbc\x19\x2c\x95\xd8\xa1\xd9\x52\x85\x5e\x5f\xbe\x54\xfa\x60\xa8\x28\x1d\x7c\x2d\xbe\x81\x67\x8b\xf3\xef\xe6\xcf\x16\xe7\xdf\xc3\x2f\x8d\xd4\x48\xf0\x9a\xdf\xf3\x5a\x39\x35\xb0\x59\x49\x16\xac\xda\xba\x7b\x6e\x10\xc8\x82\xc1\x0a\xb9\xc5\x1c\x1a\x99\xa3\x01\x57\x22\x5c\x47\x19\xfc\x4a\x02\xa5\x45\x36\x0c\x95\xce\xe9\x8b\x20\x50\x1a\xa5\x55\x8d\x11\xc8\x94\x29\x82\xea\x88\xd8\xa0\x26\x37\x1f\x0b\xa6\x4b\xed\xcd\xbc\xb6\xcd\x71\x4b\x12\xc1\xbf\xe3\x16\xfd\xae\xf3\x5e\xa5\xeb\x6b\x68\x5b\xf6\x82\x5b\x8c\x6a\x5e\x60\xd7\x79\xd7\x61\x14\x67\x61\x14\xaf\xd2\xcf\xad\xc2\x0f\xbb\xf1\x8a\xfd\x39\x74\x7e\x2c\x6a\x4e\x15\x13\xaa\xbe\xf2\xbc\x55\xfc\x06\xb2\x55\x7a\x0d\x7b\x77\xbe\x58\x0c\xe5\x72\xf5\x22\x0a\xe3\xf7\xaf\xd2\x75\x9c\xad\xe2\x25\x48\x25\x49\x3a\x34\x5c\x38\xda\xa3\xd7\xb6\xf7\xe4\x4a\x60\x3f\x67\x59\x92\x18\xf5\xe1\xd0\x75\xc3\x58\x5f\xbf\x4f\xd2\xf5\x1f\xb7\xbd\xb7\xae\xf3\xda\x16\x65\x3e\xfc\x4f\x03\x37\x9f\x4f\xdc\x3c\x3a\x12\xab\x53\x3e\x5e\x7f\x11\x7e\xa0\x43\xed\x3e\xe2\xe9\x6f\x31\xa0\x28\x15\xf8\xa1\xf8\xab\x21\x83\x17\x17\xfd\x83\x87\x16\x06\x02\x36\xfe\xa0\xb1\xf1\x9f\x43\xf7\xdc\x87\xab\x2b\x08\xd0\x89\x80\x6b\xd7\xff\x98\x50\x72\xcb\xf2\x60\x71\xae\x7b\xfa\xbf\x27\x25\x07\x4d\xa7\x47\x25\xb7\x49\x74\xf4\x76\x39\xe8\xc2\x93\x27\xb0\xf1\x00\x00\xa2\x24\x59\xa7\xd9\xe5\x59\x3b\x21\xb3\xa7\x41\x70\x42\xd4\xbb\x9c\x0c\xcc\x35\xfc\x13\x30\x4d\x3a\x98\x3a\xc7\x05\xde\x16\x95\xba\xe3\xd5\xbb\x8d\x24\x99\xe3\x87\x79\x63\xaa\xcb\xb3\x49\x2d\x30\x4a\xb9\x40\x1f\x34\x6d\xa4\x33\x8d\x75\x98\xcf\x4b\x65\xdd\xe5\x59\x7b\x3c\xfb\xab\x8b\xa7\xdd\xb0\xe1\xa8\xaf\x49\x0f\xfb\x4d\x5b\xcd\x20\x92\xd6\xf1\xaa\x82\x97\xaa\xae\x95\x84\x30\xc9\x40\x73\xb1\xe3\x05\x5a\x36\x2c\xc8\xb5\x9b\x17\xe8\xa0\xd1\x39\x77\x38\x59\x9c\x9d\x74\x0a\xc3\x73\x84\xf9\x61\xea\x7e\xec\xd1\x28\x3f\x3f\x0c\xb7\x1a\x47\x95\x85\x82\x1c\x88\xc6\x54\x70\xdf\x23\xb6\xc9\x15\x34\xf2\x6f\xd2\x20\x04\x17\x25\x9e\xb8\xaa\xb8\x2c\x1a\x5e\x20\x58\x8d\x82\xb6\x24\x4e\xcc\xb5\xed\x5d\xa5\xc4\x0e\xfc\xf1\x96\x0f\xa7\xd1\x98\x34\x4c\x23\x1d\xd5\x68\xc1\x29\xb8\x43\x68\xfa\xb7\x94\x24\x38\xb4\xce\x32\x2f\x4c\x7f\x82\x37\xab\xf4\x26\x5a\xc7\x93\xe2\x1e\x8d\x25\x25\xff\x57\x11\x87\x60\xe5\x9f\x98\xa1\x2d\xb0\xcc\xf0\x3d\x59\x16\xe6\xb9\x92\xb6\x0f\x25\x4b\x46\x62\x4c\xcb\x17\x1e\x4b\xdb\x1a\x2e\x0b\x7c\x7c\xf8\x98\x7b\x98\x5e\x92\x87\x54\x8e\x8e\x8f\x1f\x94\xa3\xe1\x70\xb9\xec\xf9\xd0\x88\x92\xf6\xd8\x75\x10\xe4\xdc\x71\xef\xf7\x75\xfa\x7a\x19\xa5\x63\xf5\x20\xd1\xd3\x28\x9d\x39\x68\x45\xd2\x31\x5b\xc2\x90\x2b\x6f\x15\x67\xe9\x6d\xb2\x8e\xe2\x0c\xde\xf6\xdf\x9f\xd2\xff\x16\xfc\x63\xe4\x3e\xc1\xfd\x77\x0f\x5a\xff\x06\x00\x00\xff\xff\xda\x5f\x40\x0d\x55\x05\x00\x00")

func assetsDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_assetsDockerfile,
		"assets/Dockerfile",
	)
}

func assetsDockerfile() (*asset, error) {
	bytes, err := assetsDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/Dockerfile", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsDockerfileGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x51\x6b\xdb\x3e\x14\xc5\xdf\xf5\x29\x2e\x4e\x28\x2d\x7f\x6c\xb5\x7d\xf8\x0f\x0a\x79\x08\x4b\xc8\xbc\x36\x49\xc9\xb2\xee\x61\x1b\x45\x95\xaf\xed\x4b\x6c\x49\x48\x72\xb2\xa0\xfa\xbb\x8f\xd8\xa1\x09\x6c\x83\xbe\x49\x57\xe7\x77\xef\xb9\x47\x03\x36\x80\x89\x96\x1b\xb4\x39\x55\x18\x17\x9a\x1d\x2a\x1f\xb5\xd9\x5b\x2a\x4a\x0f\x97\xf2\x0a\x6e\xaf\x6f\xfe\x8f\x6f\xaf\x6f\x3e\xc0\xe7\x46\x19\x24\xb8\x17\x3b\x51\x6b\xdf\x6b\xd7\x25\x39\x70\x3a\xf7\x3b\x61\x11\xc8\x81\xc5\x0a\x85\xc3\x0c\x1a\x95\xa1\x05\x5f\x22\xcc\xd3\x35\x3c\x90\x44\xe5\x30\xe9\xa0\xd2\x7b\x73\xc7\xb9\x36\xa8\x9c\x6e\xac\xc4\x44\xdb\x82\x57\xbd\xc4\xf1\x9a\x7c\x7c\xbc\x24\xa6\x34\x6c\xc0\x42\xc8\x30\x27\x85\x10\x19\x21\x37\xa2\xc0\xa8\x6d\xd9\x74\xf1\x04\xb3\xe5\xe3\x78\xfd\x09\x78\x26\xbc\x60\xab\xaf\x0b\x10\xc6\xc7\x05\x7a\x20\xe5\xbc\xa8\x2a\x88\xf7\x50\xe8\x4a\xa8\x82\xb1\x01\xa4\xc7\x62\x41\x75\x8d\x9d\xbc\xde\x64\x64\x21\x36\x30\xec\x3b\xf1\x17\x52\x70\x71\x01\x3f\x18\x00\x80\x6c\x6c\x05\xb1\x7b\x80\x58\x9f\x0b\x78\xc7\x77\x5b\xb8\x3b\xce\xad\xd8\x25\x05\xf9\xb2\x79\x69\x1c\x5a\xa9\x95\x47\xe5\x13\xa9\x6b\xee\xad\xd8\x92\x8b\x25\xf5\x04\xaf\x85\xf3\x68\x8f\xf8\x69\x4a\x59\xeb\x0c\xfe\xfb\xf5\xe7\x08\x16\x02\xaa\xac\x6d\xd9\x59\x00\x5b\xb4\x8e\xb4\x3a\x04\x70\x5a\x48\x80\x33\x28\x29\x27\x09\xc7\x77\xd0\x39\xcc\x74\xb7\xe3\xa1\xe7\x28\x3a\x6f\x7e\x37\x3c\x1c\xa3\x93\x85\xef\x30\x7c\x9a\xae\xbe\xa4\xcb\x05\x8c\x20\x12\x6a\x1f\xc1\x4f\x78\x7d\x05\xdc\x8a\x0a\xa2\xe1\xe5\x2c\x9d\xcf\xa7\xcf\xb3\xe5\xf3\x51\x35\x7a\x93\x77\x3e\xaf\xa2\xbf\x39\xed\xbf\xf6\x60\x34\x04\xca\x21\x59\x77\x69\x24\x33\x9d\xd6\x46\x5b\xff\x28\x7c\xd9\xb6\x6c\x3c\x99\x40\x08\xc9\xd8\xca\x92\xb6\xd8\xb6\x6f\x29\x38\x2b\x79\x08\xff\xa0\x42\xc0\xca\xe1\x3b\xf0\x15\x1a\xed\xc8\x6b\xbb\xef\xa9\xce\xe4\xb7\xe5\xea\x7e\x92\xae\xde\xa5\xfd\x1d\x00\x00\xff\xff\xfa\x4c\x80\x99\x23\x03\x00\x00")

func assetsDockerfileGoBytes() ([]byte, error) {
	return bindataRead(
		_assetsDockerfileGo,
		"assets/Dockerfile-go",
	)
}

func assetsDockerfileGo() (*asset, error) {
	bytes, err := assetsDockerfileGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/Dockerfile-go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsDockerfilePython = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\x51\x4f\xdb\x3c\x14\x7d\xcf\xaf\xb8\x4a\x2b\x44\x1f\x1c\xd3\x7e\x12\x9f\x84\xc4\x03\x83\x6e\x74\x83\xb6\x2a\x2d\x12\xda\x06\x72\x92\xdb\xe4\x0a\xd7\xf6\x6c\x27\x2c\xb4\xfd\xef\x53\xd2\x50\x50\xb5\xe5\x25\xf1\x3d\xe7\xfa\x9e\x73\x6e\x3a\x41\x07\xae\x74\xf2\x8c\x76\x49\x12\x99\xa9\x7c\xae\x55\x50\x57\x2f\xb5\xa9\x2c\x65\xb9\x87\xe3\xa4\x07\x83\x93\xfe\x29\x1b\x9c\xf4\xff\x87\xaf\x85\x32\x48\xf0\x4d\xbc\x88\x95\xf6\xba\xe1\xce\x73\x72\xe0\xf4\xd2\xbf\x08\x8b\x40\x0e\x2c\x4a\x14\x0e\x53\x28\x54\x8a\x16\x7c\x8e\x70\x3b\x9a\xc3\x0d\x25\xa8\x1c\x46\x4d\x53\xee\xbd\x39\xe3\x5c\x1b\x54\x4e\x17\x36\xc1\x48\xdb\x8c\xcb\x1d\xc5\xf1\x15\x79\xd6\x1e\x22\x93\x9b\xa0\x13\xac\xd7\x29\x2e\x49\x21\x84\x46\x24\xcf\x22\xc3\x70\xbb\x0d\x3a\x30\x52\xce\x0b\x29\x41\x18\x0f\x2d\xe0\xa2\x60\xb6\x18\xd7\x15\x96\xa1\x07\x6a\x19\xac\x82\x9d\xc1\xf6\xc5\x0c\x19\x10\x96\xc4\x00\x5e\x25\xc5\xfd\x8c\xa5\x58\x82\xa4\xd8\xa2\x48\x25\x29\x3c\x6d\x0a\x3f\x02\xf8\xfb\x23\x29\x8e\x5f\x07\x6f\x4d\xee\x97\x24\x8f\xff\xed\x8f\x4e\xd6\x9f\x41\x07\x16\x26\x15\x1e\xc1\x90\x69\x54\xd5\x43\xf7\x8a\x58\x61\x32\x2b\xd2\x1d\xfa\xee\xc5\x54\xa8\xca\x86\x9d\x14\x56\x02\x73\x77\x37\x4d\x5e\xee\x8c\x73\x2b\x5e\xa2\x8c\x7c\x5e\xc4\x85\x43\x9b\x68\xe5\x51\xf9\x28\xd1\x2b\x5e\x55\x45\xc1\x9b\x56\xd6\x0e\x40\xcb\x57\xc2\x79\xb4\x3c\x26\x75\x08\xc1\x06\x62\xe1\xf2\x60\xbd\x46\x95\x6e\xb7\xc1\x87\x80\x4b\xb4\x8e\xb4\x3a\x08\x18\x9c\xc1\x84\x96\x94\xbc\xc5\xd8\xd2\x82\xe1\xf8\x1e\xa6\x0f\xf3\xeb\xc9\xf8\xe9\xd3\x62\x74\x73\xf5\x74\x31\x1b\x5d\x0c\x9e\x26\xd3\xf9\x1d\x84\xec\x37\xf4\x4f\x80\x3d\x43\xff\x36\x6c\x2c\x4d\x2f\xe6\xd7\xe7\x21\xb7\x5a\x7b\x1e\x35\x9a\x6a\x75\x67\xdd\xba\x1e\xc2\xd1\x51\x1b\x38\x96\x42\x42\xd8\x3d\x6e\x18\x40\x8a\x3c\xb0\xde\x3f\xf1\x92\xac\x2f\x84\xdc\x19\x3c\xa4\x4e\x1f\xee\x87\xb3\xbb\xd1\x64\x7c\xfe\x7e\x5d\xbb\x00\x09\x1b\xa8\x7f\xd4\xd0\x71\xe0\x3c\x0b\x61\x03\x99\x45\x03\x6c\x08\xe1\x63\xb7\x6d\x3b\xee\x6e\xbe\x3f\xb2\x9f\xbd\x1a\xf5\x82\x24\xb0\x7e\xef\x83\x10\x55\xbe\xb9\xbf\x9c\x8c\x3f\x8f\xbe\x2c\x66\xc3\xc6\xfb\x79\xc8\x18\x2a\x11\x4b\x64\x2e\x17\x16\xd3\x10\x0e\xa6\x3b\x60\x25\x74\xf7\xf2\xde\xef\xdc\xf1\xa4\x4e\x84\xfc\x80\xef\x57\xf5\x27\x00\x00\xff\xff\xc1\x42\xc9\xc3\xb7\x03\x00\x00")

func assetsDockerfilePythonBytes() ([]byte, error) {
	return bindataRead(
		_assetsDockerfilePython,
		"assets/Dockerfile-python",
	)
}

func assetsDockerfilePython() (*asset, error) {
	bytes, err := assetsDockerfilePythonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/Dockerfile-python", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsEntrypoint = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\x5f\x6b\x9c\x40\x14\xc5\xdf\xe7\x53\x9c\x68\x1e\x12\xd8\xd5\x4d\x02\x2d\xa4\x14\x4a\x0b\x85\xed\x9f\x97\x26\x6f\x9b\xd0\x8c\x7a\xd5\xa1\x3a\x33\xcc\x5c\xb3\x59\xc4\xef\x5e\x74\x4c\x97\xb6\x20\x24\x4f\x7a\xaf\x67\xee\xef\x9e\xe3\xf4\x7d\x41\xa5\xd2\x84\x28\x93\x9e\xa2\x61\x10\xf1\x49\x9a\x29\x9d\x66\xd2\xd7\x22\x16\x31\x48\xb3\x3b\x58\xa3\x34\x4f\xe5\x27\x63\x0f\x4e\x55\x35\xe3\x2c\x3f\xc7\xe5\xe6\xe2\xcd\xfa\x72\x73\xf1\x16\x5f\x3a\x6d\x49\xe1\xab\xdc\xcb\xd6\xb0\x99\xb4\xb7\xb5\xf2\xf0\xa6\xe4\xbd\x74\x04\xe5\xe1\xa8\x21\xe9\xa9\x40\xa7\x0b\x72\xe0\x9a\xf0\x7d\x7b\x8b\x6f\x2a\x27\xed\x29\x99\x0e\xd5\xcc\xf6\x3a\x4d\x8d\x25\xed\x4d\xe7\x72\x4a\x8c\xab\xd2\x26\x48\x7c\xda\x2a\x5e\xcf\x45\x62\x6b\x2b\x62\x21\x62\xfc\xe8\x34\x32\x2a\xcd\x48\xd1\x9e\x65\xd3\xc0\x33\x59\xbf\xfa\xb7\x9c\x45\x3e\x77\xca\xf2\x73\x53\xea\x62\xee\x88\x38\xf4\xa0\x34\x78\x5c\xde\xb8\x82\x5c\x82\x6d\x09\xa9\x0f\xb0\xd2\xc9\x96\x98\x9c\xc7\x68\xa8\x52\x8f\xa4\x57\xa0\x27\xca\x3b\xa6\xc9\xcd\x51\x21\xe2\x89\x4d\xb2\x48\xf0\xd9\x38\xd0\x93\x6c\x6d\x43\x2b\xb0\x41\x41\x59\x57\x05\x40\xe0\xae\xe0\xba\x99\xb8\x57\x5c\xe3\x61\x4c\xff\x01\xd2\x8f\x43\x45\x7c\x1c\x3b\xed\x5a\x11\x43\xc2\xd7\xd4\x34\x90\x79\x4e\xde\x27\xc2\x13\x63\x4d\xa2\xef\xb3\xc6\xe4\xbf\x10\x91\x7e\x8c\x90\x0c\x83\xe8\x7b\xd2\xc5\x30\x08\x55\x62\xb7\xc3\x69\x8c\x93\xf7\xd8\xe0\xfe\xfe\xdd\x38\x5a\x0b\x4c\xeb\xe3\xf4\x83\x28\xd5\xf1\xb4\x75\x64\xa5\xa3\xbf\x27\x1c\x3f\x87\x14\x7f\xce\xd9\x06\x15\xe5\xb5\xc1\x9a\x10\xdd\xd1\xee\xea\xaa\xfd\x18\x82\xde\xce\xf1\xdf\x8c\xa9\x5e\xdf\xd1\xae\x8d\x44\xdf\x3b\xa9\x2b\x42\x12\x34\xb3\xe4\x79\x44\xd4\xf7\xc9\x30\x44\xe2\x6c\x7a\x9e\xff\xa1\xff\xbf\xc5\x12\x7e\x91\xfb\x6a\xe2\xec\x3b\xfc\xb3\x25\xdb\x37\xe1\x7e\x2d\xb8\x0e\x8a\x97\xaf\xb0\xc0\x5e\x82\xbe\x18\x17\x5e\x7e\x07\x00\x00\xff\xff\x71\xc3\x35\xb8\x1e\x04\x00\x00")

func assetsEntrypointBytes() ([]byte, error) {
	return bindataRead(
		_assetsEntrypoint,
		"assets/entrypoint",
	)
}

func assetsEntrypoint() (*asset, error) {
	bytes, err := assetsEntrypointBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/entrypoint", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsEntrypointGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xc1\x6e\xdc\x36\x10\xbd\xf3\x2b\x5e\x25\x03\xb5\x03\x8b\x4a\x62\xa0\x05\x5c\xe4\xe0\xb4\xe9\x76\xdb\x3a\x2e\xbc\x6e\x2e\x8e\x91\x70\xa5\x11\x45\x98\x22\x05\x92\x5a\xdb\x90\xf5\xef\x05\x25\xd9\xbb\x58\xfb\xd0\x8b\x44\x3e\x0e\x67\xde\x9b\x79\x4c\x7f\xc8\xd7\xca\xe4\x6b\xe1\x6b\x96\xb2\x14\x64\x82\x7b\x68\xad\x32\x21\x93\x76\x44\x7e\xb5\xed\x83\x53\xb2\x0e\x38\x2c\x8e\xf0\xfe\xed\xbb\x9f\xb2\xf7\x6f\xdf\xfd\x8c\x3f\x3b\xd3\x92\xc2\x5f\xe2\x4e\x34\x36\x4c\xb1\x57\xb5\xf2\xf0\xb6\x0a\x77\xc2\x11\x94\x87\x23\x4d\xc2\x53\x89\xce\x94\xe4\x10\x6a\xc2\xf9\xf2\x0a\x7f\xab\x82\x8c\x27\x3e\x5e\xaa\x43\x68\x4f\xf3\xdc\xb6\x64\xbc\xed\x5c\x41\xdc\x3a\x99\xeb\x29\xc4\xe7\x8d\x0a\xd9\xbc\xe1\x6d\xdd\xb2\x94\xb1\x14\x97\x9d\xc1\x9a\x2a\x1b\xab\x18\x1f\x84\xd6\xf0\x81\x5a\x7f\xbc\xbf\x9d\x83\x7c\xe1\x54\x1b\x9e\x40\x61\xca\x19\x61\xe9\x84\x41\x19\x84\x48\xde\xba\x92\x1c\x9f\x84\x8c\xbd\xc0\xd8\x8c\xa7\x04\x95\x2d\x3a\x4f\x1e\xd6\xc0\x75\xc6\x28\x23\x11\xc8\x07\x8f\xca\x3a\x96\x62\x61\x21\xda\x56\xab\x42\x04\x65\x8d\xe7\x58\x56\x10\xe6\x01\xad\x70\xa2\xa1\x40\xce\x23\x36\x46\xaa\x0d\x99\x63\xd0\x3d\x15\x5d\xa0\xb1\x2b\xdb\x08\x96\x8e\x1a\x48\x94\x1c\xbf\x5b\x07\xba\x17\x4d\xab\xe9\x18\xc1\xa2\xa4\x75\x27\x27\xa2\x13\xa1\xe3\x48\x63\x02\xee\x54\xa8\xf1\x3d\x0e\xf2\x3b\x84\x8f\x49\x59\xba\x4d\x3b\x6a\x96\x14\x20\xe0\x6b\xd2\x1a\xa2\x28\xc8\x7b\xce\xfa\xbe\xa4\x4a\x19\x42\x42\x66\x93\x0c\x03\xfb\xe7\xec\xea\x8f\x0f\xc9\xc1\xe2\x22\x2e\xa2\x39\x4e\x0f\xe2\x2a\x61\x25\x15\x3a\xb2\xcf\xee\xb1\x58\x9e\x9f\x7f\xfa\xb6\xb8\xf8\xf6\xe5\xd3\xe5\x6a\x79\xf1\xf9\xc3\xc1\xa1\x54\x4d\x43\xc8\xf4\x11\x53\x15\xae\xaf\x91\x19\x24\x07\xfb\x71\x09\x6e\x6e\x7e\x89\xd4\x0c\x03\x68\x23\x34\x92\xf9\xe6\x51\xc2\x2a\xc5\x1c\x89\xd2\x1a\xfd\x80\xab\xcb\xb3\x2f\xcb\xd5\x5e\x05\x8b\x0d\x39\xaf\xac\xc1\x23\x8a\x2e\x20\xab\x70\x82\xac\x44\x82\x04\x8f\x88\x2e\xf3\xb9\xb4\x79\x2e\x8f\x58\xdf\x93\x29\x87\x81\xed\xc8\x9b\x8d\x11\x25\x52\x51\x5b\x64\x84\xe4\x2b\x5d\x9f\x9c\x34\xcb\xd9\x32\xab\xe8\x84\xd3\xaf\x74\xdd\x24\x4c\xaa\x80\xc2\x9a\x4a\x49\x64\x99\xd4\x76\x2d\xf4\x68\x54\x1e\x3f\xfe\x34\xcf\xa5\x6d\x6f\x25\x57\x86\x57\x56\x6b\x7b\x77\x49\xa5\x72\x54\x04\x8f\xe0\x3a\x62\x7d\xaf\x2a\xf0\x39\xf1\x30\xb0\xbe\x77\xc2\x48\xda\x85\x46\x12\x49\xdf\xf3\x61\x48\xd8\xe1\xf8\xdf\xf2\xee\x7b\xd2\x9e\x9e\xa3\xa4\x1d\x67\x97\x05\xf0\x9c\x73\x9e\xb0\x3d\x60\xf7\xde\xbe\xee\xc9\x28\xaf\xc8\x5e\x4d\x96\xde\x55\xdd\xf7\xf9\x1b\x24\xaa\x7a\xb2\xbb\xf2\xe6\xc7\xf0\x64\xd7\xce\x13\x1a\x71\x4b\xb0\xd3\x43\x2e\xa9\x12\x9d\x0e\x90\x56\x8b\xf9\x1d\xa0\xb0\x4d\x23\x4c\xc9\x13\xbc\xc9\x47\x3a\xb1\x0d\x53\xa1\xdd\x2e\x3c\x23\xff\xaf\x09\xb3\xa3\x08\x8b\xcf\xff\x9e\x8b\x5b\xaa\x94\x26\xdc\xdc\xe0\xf1\x71\xc6\x5f\x05\x3f\xae\x7e\x6b\x5e\xc3\x77\xc0\x67\x2f\x46\x8c\xc5\x6a\x0c\x98\x48\x2f\xec\xc7\x4e\xe9\xf2\xcc\x49\x3f\x0c\x0c\x90\x76\x52\xd8\xf7\x2f\x8e\x9e\x79\x6e\xa3\xb2\xcd\x3c\x98\xf1\x74\x54\x53\xa9\x17\x53\xfa\x2f\x00\x00\xff\xff\xc3\x68\x4c\xe6\x7d\x05\x00\x00")

func assetsEntrypointGoBytes() ([]byte, error) {
	return bindataRead(
		_assetsEntrypointGo,
		"assets/entrypoint-go",
	)
}

func assetsEntrypointGo() (*asset, error) {
	bytes, err := assetsEntrypointGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/entrypoint-go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsEntrypointPython = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x52\x5f\x6b\xdb\x4e\x10\x7c\xbf\x4f\x31\x3f\x29\x84\x04\x2c\x29\x7f\xe0\x57\x48\xc9\x43\x29\x29\x75\xdb\xb4\x21\x31\x85\xe2\x04\x72\x96\x56\xd2\x81\xb4\x77\xbd\x5b\x39\x36\xc2\xdf\xbd\x48\xb6\xeb\x92\xf6\xe9\xb8\xb9\xb9\xd9\xd9\xd9\x8d\xff\xcb\x16\x86\xb3\x85\x0e\xb5\x8a\x55\x0c\x62\xf1\x6b\x67\x0d\x4b\xe2\xd6\x52\x5b\x1e\xd1\xf7\xd6\xad\xbd\xa9\x6a\xc1\x49\x7e\x8a\x8b\xb3\xf3\xff\x93\x8b\xb3\xf3\x37\xf8\xd4\xb1\x23\x83\xcf\xfa\x45\xb7\x56\xec\xc8\x9d\xd5\x26\x20\xd8\x52\x5e\xb4\x27\x98\x00\x4f\x0d\xe9\x40\x05\x3a\x2e\xc8\x43\x6a\xc2\xed\x74\x86\x2f\x26\x27\x0e\x94\x8e\x9f\x6a\x11\x77\x95\x65\xd6\x11\x07\xdb\xf9\x9c\x52\xeb\xab\xac\xd9\x52\x42\xd6\x1a\x49\x76\x97\xd4\xd5\x4e\xc5\x4a\xc5\xb8\xef\x18\x0b\x2a\xed\x50\x85\x83\xe8\xa6\x41\x10\x72\x61\xf2\xfa\xba\x23\x85\xdc\x1b\x27\x7b\x50\x73\xb1\x43\x54\xbc\xc5\x60\x18\x32\x98\xb7\xbe\x20\x9f\x6e\x1b\x19\xf3\xc0\x18\xc8\x5e\xa0\xb4\x79\x17\x28\xc0\x32\x7c\xc7\x6c\xb8\x82\x50\x90\x80\xd2\x7a\x15\xe3\x6e\x8c\x0d\xda\xb9\xc6\xe4\x5a\x8c\xe5\x90\x62\x5a\x42\xf3\x1a\x4e\x7b\xdd\x92\x90\x0f\x18\xc2\xa9\xcc\x92\x78\x02\x5a\x51\xde\x09\x8d\xc9\x1c\x18\x2a\x1e\xfb\x20\x5d\xa4\xf8\x60\x3d\x68\xa5\x5b\xd7\xd0\x04\x62\x51\xd0\xa2\xab\xb6\x66\xb7\xa6\x26\x83\x95\x2d\xf0\x62\xa4\xc6\xf3\x30\xd0\x67\xe8\x30\x88\xaa\xf8\x20\x3b\xf6\x5d\x91\x40\x23\xd4\xd4\x34\xd0\x79\x4e\x21\xa4\xaa\xef\x0b\x2a\x0d\x13\x22\xe2\x65\xb4\xd9\xa8\xbb\x77\xb3\x8f\xd7\x51\xe6\xad\x95\x2c\x75\x6b\xe2\xe5\xb0\x29\x57\x47\x03\x1e\x29\x5a\xea\x06\xd1\xd1\xc9\xf8\x00\xc3\x46\x90\x9c\x46\x38\x3e\xc6\xe3\xab\xb7\xa5\xf1\xd2\xe9\x86\x78\x99\xec\x69\xaa\xef\x89\x8b\xcd\x46\xfd\x51\xd5\x79\x72\xda\xd3\x50\x79\x76\x73\x7f\x7b\xbd\x12\xf2\xad\xf2\xa4\x0b\xcb\xcd\x1a\x77\x3f\xbe\xdf\xdc\x3f\x4c\xbf\x7d\xbd\xde\xeb\x36\x36\xd7\xcd\xe9\xbf\xa4\x76\xe3\x1f\xa4\x28\xaf\x2d\x12\x42\xf4\x48\xf3\xcb\xcb\x76\xba\x5b\x8c\x87\x61\xde\x57\x8f\x34\x6f\x23\x65\x4a\xcc\xe7\x03\xc7\xd3\xcf\xce\x78\x6a\x89\x25\xa4\xb2\x12\x3c\x3d\xbd\x1d\xe2\x63\x05\x38\xe3\x7e\x6f\x55\xe2\xff\xa2\xaa\xd2\xa8\xbe\xf7\x9a\x2b\x42\xba\x2b\xb2\xaf\x1e\xf5\x7d\xba\xd9\x44\xea\x64\x3c\x0f\x86\xf7\xe7\xaf\x00\x00\x00\xff\xff\xa4\xee\xb5\x7b\x82\x03\x00\x00")

func assetsEntrypointPythonBytes() ([]byte, error) {
	return bindataRead(
		_assetsEntrypointPython,
		"assets/entrypoint-python",
	)
}

func assetsEntrypointPython() (*asset, error) {
	bytes, err := assetsEntrypointPythonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/entrypoint-python", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/Dockerfile": assetsDockerfile,
	"assets/Dockerfile-go": assetsDockerfileGo,
	"assets/Dockerfile-python": assetsDockerfilePython,
	"assets/entrypoint": assetsEntrypoint,
	"assets/entrypoint-go": assetsEntrypointGo,
	"assets/entrypoint-python": assetsEntrypointPython,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"Dockerfile": &bintree{assetsDockerfile, map[string]*bintree{}},
		"Dockerfile-go": &bintree{assetsDockerfileGo, map[string]*bintree{}},
		"Dockerfile-python": &bintree{assetsDockerfilePython, map[string]*bintree{}},
		"entrypoint": &bintree{assetsEntrypoint, map[string]*bintree{}},
		"entrypoint-go": &bintree{assetsEntrypointGo, map[string]*bintree{}},
		"entrypoint-python": &bintree{assetsEntrypointPython, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

