// Code generated by go-bindata.
// sources:
// assets/Dockerfile
// assets/Dockerfile-go
// assets/Dockerfile-python
// assets/entrypoint
// assets/entrypoint-go
// assets/entrypoint-python
// DO NOT EDIT!

package command

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x94\x6f\x8f\xa3\x36\x10\xc6\xdf\xf3\x29\x46\x64\x7b\x6a\x4f\x05\x92\x7b\xd1\x4a\xb9\x66\x55\xee\x92\x6b\xe9\x35\x80\x58\x7a\xed\x6a\xb3\x5a\x79\xcd\x04\xdc\x80\xed\xda\x26\xd9\x08\xd1\xcf\x5e\x41\xe8\x92\xfd\xa3\x7b\x81\x60\x3c\xbf\x79\xfc\x0c\x1e\x98\x58\x13\x58\x0a\xba\x43\xb5\x65\x25\x5a\x5d\xf8\x51\xc8\xa3\x62\x79\x61\xe0\x5b\xfa\x1d\xbc\x9b\xce\x7e\x70\xde\x4d\x67\x3f\xc2\x6f\x35\x97\xc8\xe0\x33\x39\x90\x4a\x18\xd1\xb3\x69\xc1\x34\x68\xb1\x35\x07\xa2\x10\x98\x06\x85\x25\x12\x8d\x19\xd4\x3c\x43\x05\xa6\x40\x58\x07\x29\xfc\xce\x28\x72\x8d\x6e\x5f\x54\x18\x23\xe7\x9e\x27\x24\x72\x2d\x6a\x45\xd1\x15\x2a\xf7\xca\x13\xa2\xbd\x8a\x19\x67\x08\x5c\x59\x48\x6b\x62\x35\x4d\x86\x5b\xc6\x11\xec\x7b\xa2\xd1\x6e\x5b\xeb\x53\x12\xad\xa1\x69\xdc\x0f\x44\x63\x50\x91\x1c\xdb\xd6\x5a\xfb\x41\x98\xfa\x41\xb8\x4a\x9e\x5b\x85\x9f\x76\xc3\x93\xfb\x77\x9f\xf9\x39\xaf\x08\x2b\x5d\x2a\xaa\x4b\xcb\x5a\x85\x5f\x20\x5d\x25\x6b\xd8\x9b\xd9\x74\xda\x87\xcb\xd5\x87\xc0\x0f\xef\x3e\x25\x51\x98\xae\xc2\x25\x70\xc1\x19\x37\xa8\x08\x35\x6c\x8f\x56\xd3\x1c\x98\x29\xc0\xfd\x35\x4d\xe3\x58\x89\x87\x63\xdb\xf6\x65\x5d\x7c\x17\x27\xd1\x5f\xd7\x9d\xb7\xb6\xb5\x9a\x06\x79\xd6\xdf\xc7\x82\xab\xe7\x15\x57\x5f\x2d\x09\xc5\x39\x1f\x46\xaf\xc2\x8f\xb4\x2f\xcd\xff\x78\xf2\x47\x08\x48\x0b\x01\xb6\x4f\xff\xa9\x99\xc2\xf9\xbc\x7b\xf1\xd0\x40\x4f\xc0\xc6\xee\x35\x36\xf6\x7b\x68\xdf\xdb\x70\x79\x09\x1e\x1a\xea\x11\x69\xba\xcb\xa5\x82\x6f\xdd\xcc\x9b\xce\x64\x47\xbf\xdc\x29\x3e\x4a\x76\xbe\x55\x7c\x1d\x07\x27\x6f\x8b\x5e\x17\xde\xbc\x81\x8d\x05\x00\x10\xc4\x71\x94\xa4\x8b\x8b\x66\x44\x26\x6f\x3d\xef\x8c\xa8\x76\x19\x53\xe0\x48\xf8\xd7\x73\x25\x93\xde\x98\x39\x35\x70\x93\x97\xe2\x9e\x94\xb7\x1b\xce\x78\x86\x0f\x4e\xad\xca\xc5\xc5\xa8\xe6\x29\x21\x8c\x27\x8f\x92\x6d\xb8\x51\xb5\x36\x98\x39\x85\xd0\x66\x71\xd1\x9c\xf6\xfe\x66\xfe\xb6\xed\x3b\x1c\xf4\x25\x93\x7d\x7f\x63\x57\x13\x08\xb8\x36\xa4\x2c\xe1\xa3\xa8\x2a\xc1\xc1\x8f\x53\x90\x84\xee\x48\x8e\xda\xed\x1b\x24\xd2\x38\x39\x1a\xa8\x65\x46\x0c\x8e\x16\xc7\xf5\x5c\x91\x0c\xc1\x39\xbe\xcc\xb1\x41\xdc\x39\xf6\x4b\xb5\x61\xa5\x86\x9c\x19\xa0\xb5\x2a\xe1\xd0\x21\xba\xce\xc4\x99\x8d\x92\xf0\xbc\x26\x39\x82\x96\x48\xd9\x96\xd1\x33\x37\x4d\x73\x5f\x0a\xba\x03\x7b\x58\xb2\xe1\x7c\x16\x46\x0d\x85\xfd\xb9\x67\x4f\x4a\x15\xe1\x39\x82\x9b\x2a\xb2\x67\xda\xf5\xb3\x4c\x70\xdd\x8d\x8d\x1b\x0f\xd0\x70\x9e\xaf\x58\x7f\x36\x73\x96\x9f\xfc\x02\x5f\x56\xc9\x55\x10\x85\xa3\xa7\x3d\x2a\xcd\x04\x7f\xea\x69\x4c\x9f\x3e\xf8\x53\xd6\x5f\x2e\x3b\x4d\x5f\xd1\x82\xed\xb1\x6d\xc1\xcb\x88\x21\xd6\x9f\x51\xf2\x79\x19\x24\x43\xf4\x28\xd1\xd1\xc8\x8d\x3a\x4a\xc1\xb8\x71\x75\x01\xfd\xb9\x5b\xab\x30\x4d\xae\xe3\x28\x08\x53\xb8\xe9\xfe\x0f\x85\xfd\x3d\xd8\xa7\x91\x78\x82\xdb\xb7\x8f\x5a\xff\x05\x00\x00\xff\xff\x09\xcf\x8b\xdb\xf5\x04\x00\x00")

func assetsDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_assetsDockerfile,
		"assets/Dockerfile",
	)
}

func assetsDockerfile() (*asset, error) {
	bytes, err := assetsDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/Dockerfile", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsDockerfileGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x51\x6b\xdb\x3e\x14\xc5\xdf\xf5\x29\x2e\x4e\x28\x2d\x7f\x6c\xb5\x7d\xf8\x0f\x0a\x79\x08\x4b\xc8\xbc\x36\x49\xc9\xb2\xee\x61\x1b\x45\x95\xaf\xed\x4b\x6c\x49\x48\x72\xb2\xa0\xfa\xbb\x8f\xd8\xa1\x09\x6c\x83\xbe\x49\x57\xe7\x77\xef\xb9\x47\x03\x36\x80\x89\x96\x1b\xb4\x39\x55\x18\x17\x9a\x1d\x2a\x1f\xb5\xd9\x5b\x2a\x4a\x0f\x97\xf2\x0a\x6e\xaf\x6f\xfe\x8f\x6f\xaf\x6f\x3e\xc0\xe7\x46\x19\x24\xb8\x17\x3b\x51\x6b\xdf\x6b\xd7\x25\x39\x70\x3a\xf7\x3b\x61\x11\xc8\x81\xc5\x0a\x85\xc3\x0c\x1a\x95\xa1\x05\x5f\x22\xcc\xd3\x35\x3c\x90\x44\xe5\x30\xe9\xa0\xd2\x7b\x73\xc7\xb9\x36\xa8\x9c\x6e\xac\xc4\x44\xdb\x82\x57\xbd\xc4\xf1\x9a\x7c\x7c\xbc\x24\xa6\x34\x6c\xc0\x42\xc8\x30\x27\x85\x10\x19\x21\x37\xa2\xc0\xa8\x6d\xd9\x74\xf1\x04\xb3\xe5\xe3\x78\xfd\x09\x78\x26\xbc\x60\xab\xaf\x0b\x10\xc6\xc7\x05\x7a\x20\xe5\xbc\xa8\x2a\x88\xf7\x50\xe8\x4a\xa8\x82\xb1\x01\xa4\xc7\x62\x41\x75\x8d\x9d\xbc\xde\x64\x64\x21\x36\x30\xec\x3b\xf1\x17\x52\x70\x71\x01\x3f\x18\x00\x80\x6c\x6c\x05\xb1\x7b\x80\x58\x9f\x0b\x78\xc7\x77\x5b\xb8\x3b\xce\xad\xd8\x25\x05\xf9\xb2\x79\x69\x1c\x5a\xa9\x95\x47\xe5\x13\xa9\x6b\xee\xad\xd8\x92\x8b\x25\xf5\x04\xaf\x85\xf3\x68\x8f\xf8\x69\x4a\x59\xeb\x0c\xfe\xfb\xf5\xe7\x08\x16\x02\xaa\xac\x6d\xd9\x59\x00\x5b\xb4\x8e\xb4\x3a\x04\x70\x5a\x48\x80\x33\x28\x29\x27\x09\xc7\x77\xd0\x39\xcc\x74\xb7\xe3\xa1\xe7\x28\x3a\x6f\x7e\x37\x3c\x1c\xa3\x93\x85\xef\x30\x7c\x9a\xae\xbe\xa4\xcb\x05\x8c\x20\x12\x6a\x1f\xc1\x4f\x78\x7d\x05\xdc\x8a\x0a\xa2\xe1\xe5\x2c\x9d\xcf\xa7\xcf\xb3\xe5\xf3\x51\x35\x7a\x93\x77\x3e\xaf\xa2\xbf\x39\xed\xbf\xf6\x60\x34\x04\xca\x21\x59\x77\x69\x24\x33\x9d\xd6\x46\x5b\xff\x28\x7c\xd9\xb6\x6c\x3c\x99\x40\x08\xc9\xd8\xca\x92\xb6\xd8\xb6\x6f\x29\x38\x2b\x79\x08\xff\xa0\x42\xc0\xca\xe1\x3b\xf0\x15\x1a\xed\xc8\x6b\xbb\xef\xa9\xce\xe4\xb7\xe5\xea\x7e\x92\xae\xde\xa5\xfd\x1d\x00\x00\xff\xff\xfa\x4c\x80\x99\x23\x03\x00\x00")

func assetsDockerfileGoBytes() ([]byte, error) {
	return bindataRead(
		_assetsDockerfileGo,
		"assets/Dockerfile-go",
	)
}

func assetsDockerfileGo() (*asset, error) {
	bytes, err := assetsDockerfileGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/Dockerfile-go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsDockerfilePython = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\x51\x4f\xdb\x3c\x14\x7d\xcf\xaf\xb8\x4a\x2b\x44\x1f\x1c\x93\x7e\x12\x9f\x84\xc4\x03\x1b\x48\x74\x83\x52\x41\x41\x42\xdb\x40\x4e\x72\x9b\x5c\xd5\xb5\x3d\xdb\x49\x17\xda\xfe\xf7\x29\x69\x68\x51\x35\xf2\x92\xf8\x9e\x73\x6e\xce\x39\x72\x2f\xe8\xc1\xa5\x4e\xe7\x68\x67\x24\x91\x99\xda\x17\x5a\x05\xcd\xf4\xab\x36\xb5\xa5\xbc\xf0\x70\x9c\x0e\x60\x78\x12\x9f\xb2\xe1\x49\xfc\x3f\x7c\x2b\x95\x41\x82\xef\x62\x29\x16\xda\xeb\x96\x3b\x2d\xc8\x81\xd3\x33\xbf\x14\x16\x81\x1c\x58\x94\x28\x1c\x66\x50\xaa\x0c\x2d\xf8\x02\xe1\x76\x34\x85\x1b\x4a\x51\x39\x8c\x5a\x51\xe1\xbd\x39\xe3\x5c\x1b\x54\x4e\x97\x36\xc5\x48\xdb\x9c\xcb\x2d\xc5\xf1\x05\x79\xd6\x1d\x22\x53\x98\xa0\x17\xac\x56\x19\xce\x48\x21\x84\x46\xa4\x73\x91\x63\xb8\xd9\x04\x3d\x18\x29\xe7\x85\x94\x20\x8c\x87\x0e\x70\x51\x70\xff\x38\x6e\x26\x2c\x47\x0f\xd4\x31\x58\x0d\xdb\x80\xdd\x8b\x19\x32\x20\x2c\x89\x21\xfc\x0c\xe0\xdf\xcf\x9b\xa4\x24\xce\x59\x86\x15\x48\x4a\x2c\x8a\x4c\x92\xc2\xd3\x76\xf0\xa9\x48\x52\x92\xbc\x0d\xdf\x45\xee\xb7\x24\x8f\xff\xed\x8e\x4e\x36\x9f\x41\x0f\x1e\x4d\x26\x3c\x82\x21\xd3\xda\x6d\xdc\xec\xac\xb2\xd2\xe4\x56\x64\x5b\x74\x1f\xd2\xd4\xa8\xaa\x96\x9d\x96\x56\x02\xbb\x69\x6b\x74\x67\x9c\x5b\xb1\x8c\x72\xf2\x45\x99\x94\x0e\x6d\xaa\x95\x47\xe5\xa3\x54\x2f\x78\x5d\x97\x25\x6f\x85\xac\x5b\x8f\x96\x2f\x84\xf3\x68\x79\x42\xea\x10\x82\x35\x24\xc2\x15\xc1\x6a\x85\x2a\xdb\x6c\x82\x0f\xbd\x57\x68\x1d\x69\x75\xd0\x3b\x38\x83\x29\xcd\x28\x7d\x6f\xb7\xa3\x05\x57\xe3\x27\x98\x3c\x4f\xaf\xef\xc6\xaf\x5f\x1e\x47\x37\x97\xaf\x17\xf7\xa3\x8b\xe1\xeb\xdd\x64\xfa\x00\x21\xfb\x03\xf1\x09\xb0\x39\xc4\xb7\x61\x1b\x68\x72\x31\xbd\x3e\x0f\xb9\xd5\xda\xf3\xa8\xf5\xd4\xb8\x3b\xeb\x37\xf3\x10\x8e\x8e\xba\xba\xb1\x12\x12\xc2\xfe\x71\xcb\x00\x52\xe4\x81\x0d\x3e\xc5\x2b\xb2\xbe\x14\x72\x1b\xf0\x90\x3a\x79\x7e\xba\xba\x7f\x18\xdd\x8d\xcf\xf7\xeb\xba\xfa\x25\xac\xa1\xb9\xbf\xa1\xe3\xc0\x79\x1e\xc2\x1a\x72\x8b\x06\xd8\x15\x84\x2f\xfd\x4e\x76\xdc\x5f\xff\x78\x61\xbf\x06\x0d\xea\x05\x49\x60\xf1\x60\xbf\xfd\x60\xa3\x03\x56\x41\x7f\xf7\xcb\x43\x9e\xd4\xa9\x90\x1f\xf0\x5d\xfd\x7f\x03\x00\x00\xff\xff\x87\xdc\x50\xff\xa2\x03\x00\x00")

func assetsDockerfilePythonBytes() ([]byte, error) {
	return bindataRead(
		_assetsDockerfilePython,
		"assets/Dockerfile-python",
	)
}

func assetsDockerfilePython() (*asset, error) {
	bytes, err := assetsDockerfilePythonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/Dockerfile-python", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsEntrypoint = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\x4f\x6f\xd4\x30\x10\xc5\xef\xfe\x14\xaf\x49\x0f\x20\x6d\x93\x6d\x0f\x20\x15\x21\x21\x90\x90\x96\x3f\x17\xda\x5b\x55\x51\x27\x79\x49\x2c\xb2\xb6\x65\x3b\xdd\xae\xa2\x7c\x77\x94\x38\xb0\x40\xbb\x87\x72\xcb\xcc\xbc\x99\xdf\xcc\x8b\x87\xa1\x62\xad\x34\x91\x14\xd2\x33\x19\x47\x91\x9e\xe4\x85\xd2\x79\x21\x7d\x2b\x52\x91\x82\x3a\xb8\xbd\x35\x4a\x87\x39\xfc\x60\xec\xde\xa9\xa6\x0d\x78\x51\xbe\xc4\xc5\xfa\xfc\xd5\xd9\xc5\xfa\xfc\x35\x3e\xf5\xda\x52\xe1\xb3\xdc\xc9\xad\x09\x66\xd6\x5e\xb7\xca\xc3\x9b\x3a\xec\xa4\x23\x94\x87\x63\x47\xe9\x59\xa1\xd7\x15\x1d\x42\x4b\x7c\xdd\x5c\xe3\x8b\x2a\xa9\x3d\xb3\xb9\xa9\x0d\xc1\x5e\xe6\xb9\xb1\xd4\xde\xf4\xae\x64\x66\x5c\x93\x77\x51\xe2\xf3\xad\x0a\x67\x4b\x90\xd9\xd6\x8a\x54\x88\x14\xdf\x7a\x8d\x82\xb5\x99\x28\xda\x07\xd9\x75\xf0\x81\xd6\xaf\xfe\x0d\x17\x91\x2f\x9d\xb2\xe1\x57\x52\xea\x6a\xc9\x88\x34\xe6\xa0\x34\xc2\xb4\xbc\x71\x15\x5d\x86\x4d\x0d\xa9\xf7\xb0\xd2\xc9\x2d\x03\x9d\xc7\x74\x50\xa3\xee\xa9\x57\xe0\x03\xcb\x3e\x70\xbe\xe6\xa0\x10\xe9\xcc\xa6\xac\x32\x7c\x34\x0e\x7c\x90\x5b\xdb\x71\x85\x60\x50\xb1\xe8\x9b\x08\x88\xdc\x15\x5c\xbf\x10\x77\x2a\xb4\xb8\x9b\xdc\xbf\x83\xf4\xd3\x50\x91\x1e\xc6\xce\xbb\x36\x0c\x90\xf0\x2d\xbb\x0e\xb2\x2c\xe9\x7d\x26\x3c\x03\xce\x28\x86\xa1\xe8\x4c\xf9\x03\x09\xf5\x7d\x82\x6c\x1c\xc5\x30\x50\x57\xe3\x28\x54\x8d\x9b\x1b\x9c\xa6\x38\x79\x8b\x35\x6e\x6f\xdf\x4c\xa3\xb5\xc0\xbc\x3e\x4e\xdf\x89\x5a\x1d\xba\xad\xa3\x95\x8e\x7f\x4f\x38\x94\xa3\x8b\xdf\x17\x6f\xa3\x8a\x65\x6b\x90\xbc\x8f\xfe\x6e\x16\xd7\xaf\x26\x33\x2f\x13\x31\x0c\x4e\xea\x86\xc8\x62\x7d\x29\xff\xee\x1a\x86\x6c\x1c\x27\xd5\x9f\xb8\xc7\xd8\x27\x78\x47\x41\xff\x89\x58\x2e\x8b\x7f\xe5\x89\xc3\xae\xe2\xc3\x39\x72\x57\xac\x3e\x97\xf9\x18\x76\x8c\xf2\xcc\xf9\xf1\xe3\x67\x00\x00\x00\xff\xff\xc1\x16\xdb\x65\xe2\x03\x00\x00")

func assetsEntrypointBytes() ([]byte, error) {
	return bindataRead(
		_assetsEntrypoint,
		"assets/entrypoint",
	)
}

func assetsEntrypoint() (*asset, error) {
	bytes, err := assetsEntrypointBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/entrypoint", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsEntrypointGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x4d\x6f\xdc\x36\x14\xbc\xf3\x57\x4c\x25\x03\x8d\x03\x8b\x4a\x52\xa0\x05\x5c\xe4\xe0\xb4\xe9\x76\xdb\x3a\x2e\xbc\x6e\x2e\x81\x91\x70\xa5\x27\x8a\x30\x45\x0a\x24\xb5\xb6\xa1\xd5\x7f\x2f\x28\x69\x3f\xb0\xc9\x21\x97\x5d\x69\x38\x7c\x6f\xe6\xbd\x51\xfa\x43\xbe\x56\x26\x5f\x0b\x5f\xb3\x94\xa5\x20\x13\xdc\x73\x6b\x95\x09\x99\xb4\x23\xf2\x9b\x6d\x9f\x9d\x92\x75\xc0\x8b\xe2\x1c\x6f\x5e\xbd\xfe\x39\x7b\xf3\xea\xf5\x2f\xf8\xab\x33\x2d\x29\xfc\x2d\x1e\x45\x63\xc3\xc4\xbd\xab\x95\x87\xb7\x55\x78\x14\x8e\xa0\x3c\x1c\x69\x12\x9e\x4a\x74\xa6\x24\x87\x50\x13\xae\x97\x77\xf8\x47\x15\x64\x3c\xf1\xf1\x52\x1d\x42\x7b\x99\xe7\xb6\x25\xe3\x6d\xe7\x0a\xe2\xd6\xc9\x5c\x4f\x14\x9f\x37\x2a\x64\xf3\x0b\x6f\xeb\x96\xa5\x8c\xa5\xb8\xed\x0c\xd6\x54\xd9\xd8\xc5\xf8\x20\xb4\x86\x0f\xd4\xfa\x8b\xd3\xd7\x99\xe4\x0b\xa7\xda\xb0\x03\x85\x29\x67\x84\xa5\x13\x06\x65\x10\xa2\x78\xeb\x4a\x72\x7c\x32\x32\xce\x02\xe3\x30\x76\x05\x2a\x5b\x74\x9e\x3c\xac\x81\xeb\x8c\x51\x46\x22\x90\x0f\x1e\x95\x75\x2c\xc5\xc2\x42\xb4\xad\x56\x85\x08\xca\x1a\xcf\xb1\xac\x20\xcc\x33\x5a\xe1\x44\x43\x81\x9c\x47\x1c\x8c\x54\x1b\x32\x17\xa0\x27\x2a\xba\x40\xe3\x54\x0e\x0c\x96\x8e\x1e\x48\x94\x1c\x7f\x58\x07\x7a\x12\x4d\xab\xe9\x02\xc1\xa2\xa4\x75\x27\x27\xa1\x93\xa0\x8b\x28\x63\x02\x1e\x55\xa8\xf1\x25\x2e\xf2\x0b\x84\x8f\x45\x59\x7a\x28\x3b\x7a\x96\x14\x20\xe0\x6b\xd2\x1a\xa2\x28\xc8\x7b\xce\xfa\xbe\xa4\x4a\x19\x42\x42\x66\x93\x0c\x03\xfb\xf7\xea\xee\xcf\xb7\xc9\xd9\xe2\x26\x3e\xc4\x70\x5c\x9e\xc5\xa7\x84\x95\x54\xe8\xa8\x3e\x7b\xc2\x62\x79\x7d\xfd\xfe\xf3\xe2\xe6\xf3\xc7\xf7\xb7\xab\xe5\xcd\x87\xb7\x67\x2f\xa4\x6a\x1a\x42\xa6\xcf\x99\xaa\xf0\xe9\x13\x32\x83\xe4\xec\x94\x97\xe0\xfe\xfe\xd7\x28\xcd\x30\x80\x36\x42\x23\x99\x6f\x9e\x27\xac\x52\xcc\x91\x28\xad\xd1\xcf\xb8\xbb\xbd\xfa\xb8\x5c\x9d\x74\xb0\xd8\x90\xf3\xca\x1a\x6c\x51\x74\x01\x59\x85\x9f\x90\x95\x48\x90\x60\x8b\x98\x32\x9f\x4b\x9b\xe7\xf2\x9c\xf5\x3d\x99\x72\x18\xd8\x91\xbd\x39\x18\xd1\x22\x15\xb5\x45\xb2\x9c\x93\xb2\x8a\x01\xb8\x4c\x98\x54\x01\x85\x35\x95\x92\xc8\x32\xa9\xed\x5a\xe8\x31\x9b\x3c\xfe\xf8\xcb\x3c\x97\xb6\x7d\x90\x5c\x19\x5e\x59\xad\xed\xe3\x2d\x95\xca\x51\x11\x3c\x82\xeb\x88\xf5\xbd\xaa\xc0\xe7\xa2\xc3\xc0\xfa\xde\x09\x23\xe9\x18\x9a\xfa\xf6\x3d\x1f\x86\x84\x8d\x7f\x7b\xa1\x7d\x4f\xda\xd3\x9e\x23\xed\xb8\xac\x2c\x80\xe7\x9c\xf3\x84\x9d\x00\xc7\xf7\x4e\x8d\x4e\xc9\x38\xf8\x5c\x4d\xd1\xdd\xd9\xec\xfb\xfc\x25\x54\xb5\x4b\xb4\xf2\xe6\xc7\x30\x25\xb2\x41\xe7\x09\x8d\x78\x20\xd8\xe9\x5b\x2d\xa9\x12\x9d\x0e\x90\x56\x8b\x39\xea\x28\x6c\xd3\x08\x53\x72\xbc\xcc\xc7\xfe\xd1\xf5\xd4\xe2\xd8\xf4\x1e\xf9\x1e\xcf\x73\x62\x08\x8b\x0f\xff\x5d\x8b\x07\xaa\x94\x26\xdc\xdf\x63\xbb\x9d\xf1\x6f\x82\xef\x56\xbf\x37\xdf\xc2\x8f\xc0\x7d\xd6\x22\xc6\x62\x37\x06\x4c\x92\x17\xf6\x5d\xa7\x74\x79\xe5\xa4\x1f\x06\x06\x48\x3b\xd9\xeb\xfb\xaf\x8e\xf6\x3a\x0f\xac\x6c\x33\xef\x61\x3c\x1d\xdd\x54\xea\xab\xa5\xfc\x1f\x00\x00\xff\xff\x61\xda\xeb\xa5\x5d\x05\x00\x00")

func assetsEntrypointGoBytes() ([]byte, error) {
	return bindataRead(
		_assetsEntrypointGo,
		"assets/entrypoint-go",
	)
}

func assetsEntrypointGo() (*asset, error) {
	bytes, err := assetsEntrypointGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/entrypoint-go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsEntrypointPython = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x52\x61\x6b\xdb\x48\x14\xfc\xbe\xbf\x62\x4e\x0a\x21\x01\x4b\x4a\xf2\xe1\x0e\x72\xe4\xc3\x71\xa4\xd4\x6d\xd3\x86\xc4\x14\x4a\x1a\xc8\x5a\x7a\x92\x16\xe4\xb7\xdb\xdd\x27\xc7\x46\xe8\xbf\x97\x95\xed\xa4\xa4\xfd\x24\x76\x76\x34\x33\x6f\xf6\xa5\x7f\x15\x4b\xc3\xc5\x52\x87\x56\xa5\x2a\x05\xb1\xf8\xad\xb3\x86\x25\x73\x5b\x69\x2d\x4f\xe8\xff\xd6\x6d\xbd\x69\x5a\xc1\x49\x79\x8a\x8b\xb3\xf3\xbf\xb3\x8b\xb3\xf3\x7f\xf0\xa1\x67\x47\x06\x1f\xf5\xb3\x5e\x59\xb1\x13\x77\xd1\x9a\x80\x60\x6b\x79\xd6\x9e\x60\x02\x3c\x75\xa4\x03\x55\xe8\xb9\x22\x0f\x69\x09\x37\xf3\x05\x3e\x99\x92\x38\x50\x3e\xfd\xd4\x8a\xb8\xcb\xa2\xb0\x8e\x38\xd8\xde\x97\x94\x5b\xdf\x14\xdd\x8e\x12\x8a\x95\x91\x6c\x7f\xc8\x5d\xeb\x54\xaa\x54\x8a\xbb\x9e\xb1\xa4\xda\x46\x17\x0e\xa2\xbb\x0e\x41\xc8\x85\xd9\xdb\xe3\x9e\x14\x4a\x6f\x9c\x1c\x40\xcd\xd5\x1e\x51\xe9\x0e\x83\x61\x48\x0c\x6f\x7d\x45\x3e\xdf\x0d\x32\xf5\x81\xa9\x90\x83\x40\x6d\xcb\x3e\x50\x80\x65\xf8\x9e\xd9\x70\x03\xa1\x20\x01\xb5\xf5\x2a\xc5\xed\x54\x1b\xb4\x73\x9d\x29\xb5\x18\xcb\x21\xc7\xbc\x86\xe6\x2d\x9c\xf6\x7a\x45\x42\x3e\x20\x96\xd3\x98\x35\xf1\x0c\xb4\xa1\xb2\x17\x9a\x9a\x79\x65\xa8\x74\x9a\x83\x74\x95\xe3\x9d\xf5\xa0\x8d\x5e\xb9\x8e\x66\x10\x8b\x8a\x96\x7d\xb3\x0b\xbb\x0b\x35\x8b\x51\x76\xc0\xb3\x91\x16\x4f\xf1\x41\x9f\xa0\x43\x14\x55\xe9\xab\xec\x34\x77\x43\x02\x8d\xd0\x52\xd7\x41\x97\x25\x85\x90\xab\x61\xa8\xa8\x36\x4c\x48\x88\xd7\xc9\x38\xaa\xdb\xff\x16\xef\xaf\x92\xc2\x5b\x2b\x45\xee\xb6\xc4\xeb\xb8\x29\x97\x47\x11\x4f\x14\xad\x75\x87\xe4\xe8\x64\xba\x80\x61\x23\xc8\x4e\x13\x1c\x1f\xe3\xfb\x9b\xbb\xb5\xf1\xd2\xeb\x8e\x78\x9d\x1d\x68\x6a\x18\x88\xab\x71\x54\xbf\xb8\x3a\x4f\x4e\x7b\x8a\xce\x8b\xeb\xbb\x9b\xab\x8d\x90\x5f\x29\x4f\xba\xb2\xdc\x6d\x71\xfb\xed\xeb\xf5\xdd\xfd\xfc\xcb\xe7\xab\x83\x6e\x67\x4b\xdd\x9d\xfe\x49\x6a\xff\xfc\x51\x8a\xca\xd6\x22\x99\xef\xf7\xe1\x3e\x3e\xf3\x65\xa2\x4c\x8d\x87\x07\x64\x04\x4f\x3f\x7a\xe3\x69\x45\x2c\x21\x97\x8d\xe0\xf1\xf1\xdf\xd8\x18\x2b\xc0\x19\xf7\xb2\x48\x99\xff\x8d\xaa\x6a\xa3\x86\xc1\x6b\x6e\x08\xf9\xde\xe0\xc5\x70\x18\xf2\x71\x8c\x63\xe6\xe3\xf8\x92\xf0\xf0\xfd\x19\x00\x00\xff\xff\xb0\x40\x7a\x46\x73\x03\x00\x00")

func assetsEntrypointPythonBytes() ([]byte, error) {
	return bindataRead(
		_assetsEntrypointPython,
		"assets/entrypoint-python",
	)
}

func assetsEntrypointPython() (*asset, error) {
	bytes, err := assetsEntrypointPythonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/entrypoint-python", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/Dockerfile": assetsDockerfile,
	"assets/Dockerfile-go": assetsDockerfileGo,
	"assets/Dockerfile-python": assetsDockerfilePython,
	"assets/entrypoint": assetsEntrypoint,
	"assets/entrypoint-go": assetsEntrypointGo,
	"assets/entrypoint-python": assetsEntrypointPython,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"Dockerfile": &bintree{assetsDockerfile, map[string]*bintree{}},
		"Dockerfile-go": &bintree{assetsDockerfileGo, map[string]*bintree{}},
		"Dockerfile-python": &bintree{assetsDockerfilePython, map[string]*bintree{}},
		"entrypoint": &bintree{assetsEntrypoint, map[string]*bintree{}},
		"entrypoint-go": &bintree{assetsEntrypointGo, map[string]*bintree{}},
		"entrypoint-python": &bintree{assetsEntrypointPython, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

